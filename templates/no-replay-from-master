#!/bin/bash

# A simple pre-rebase hook that makes it illegal to "replay" commits
# that are already on master.
#
# The way 'git rebase <foo>' works is it takes all commits that are on
# your branch but not on foo, and 'replays' them on top of 'foo'.
# This causes those commits to have a new sha1.
#
# While doing this should never cause any problems, it does cause us
# annoyance because when the replayed commits include a phabricator
# audit, it causes a new audit to be created.  It also makes it more
# difficult to talk about a commit, since the same commit might have
# two different sha1's.
#
# For these reasons, we disallow replaying commits that are on master.
# Since we only commit stuff to master that's been deployed, this
# means you can not replay any already-live code.
#
# That shouldn't happen in a normal workflow.  One way it could happen
# is if you merge in master, forget to push, and then try to rebase
# onto your branch (manually, via "arc land", etc).  The solution is
# to just do a "git push" on your deploy branch before trying to land
# onto it.
#
# For emergencies, you can override this hook by using 'git rebase --no-verify'

upstream="$1"
if [ -n "$2" ]; then
   branch="$2"
   branch_name="$2"
else
   branch=HEAD
   branch_name=`git rev-parse --abbrev-ref HEAD`
fi

will_replay=`git rev-list --pretty=oneline --abbrev-commit ^"$upstream" "$branch" | cut -f1 -d" " | sort`
will_replay_and_not_in_master=`git rev-list --pretty=oneline --abbrev-commit ^"$upstream" ^master ^origin/master "$branch" | cut -f1 -d" " | sort`

# Each commit is about 7 chars long, so we take just the first 8 commits.
will_replay_and_in_master=`comm -23 <(echo "$will_replay") <(echo "$will_replay_and_not_in_master") | head -n8 | xargs`
# If we are maxed out, indicate there may be more.
if [ `echo "$will_replay_and_in_master" | wc -w` -eq 8 ]; then
   will_replay_and_in_master="$will_replay_and_in_master ..."
fi

if [ -n "$will_replay_and_in_master" ]; then
   echo "Disabling this rebase: it would replay commits that are already in master:"
   echo "   $will_replay_and_in_master"
   echo "Try changing to branch '$branch_name' and doing a git push,"
   echo "and then running this command again."
   exit 1
fi

