#!/bin/bash

# A simple pre-rebase hook that makes it illegal to "replay" commits
# that are already on master.
#
# The way 'git rebase <foo>' works is it takes all commits that are on
# your branch but not on foo, and 'replays' them on top of 'foo'.
# This causes those commits to have a new sha1.
#
# While doing this should never cause any problems, it does cause us
# annoyance because when the replayed commits include a phabricator
# audit, it causes a new audit to be created.  It also makes it more
# difficult to talk about a commit, since the same commit might have
# two different sha1's.
#
# For these reasons, we disallow replaying commits that are on master.
# Since we only commit stuff to master that's been deployed, this
# means you can not replay any already-live code.
#
# That shouldn't happen in a normal workflow.  One way it could happen
# is if you merge in master, forget to push, and then try to rebase
# onto your branch (manually, via "arc land", etc).  The solution is
# to just do a "git push" on your deploy branch before trying to land
# onto it.
#
# For emergencies, you can override this hook by using 'git rebase --no-verify'

upstream="$1"

if [ -n "$2" ]; then
   branch="$2"
   branch_name="$2"
else
   branch=HEAD
   branch_name=$(git rev-parse --abbrev-ref HEAD)
fi

# Determine the repo’s default branch (e.g., main or master)
default_branch_ref=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null)
default_branch=${default_branch_ref##refs/remotes/origin/}

# If we can't determine the default branch, allow rebase
if [ -z "$default_branch" ]; then
   exit 0
fi

# Ensure origin/<default_branch> exists
if ! git rev-parse "origin/$default_branch" -- >/dev/null 2>&1; then
   exit 0
fi

# If local default_branch exists, exclude it, otherwise skip that filter
if git rev-parse "$default_branch" -- >/dev/null 2>&1; then
   not_default_branch="^$default_branch"
else
   not_default_branch=
fi

# Get the commits that would be replayed by this rebase
will_replay=$(git rev-list --pretty=oneline --abbrev-commit ^"$upstream" "$branch" | cut -f1 -d" " | sort)
will_replay_and_not_in_default=$(git rev-list --pretty=oneline --abbrev-commit ^"$upstream" $not_default_branch ^"origin/$default_branch" "$branch" | cut -f1 -d" " | sort)

# Compare and extract the overlap — commits that are already in the default branch
will_replay_and_in_default=$(comm -23 <(echo "$will_replay") <(echo "$will_replay_and_not_in_default") | head -n8 | xargs)

# If we hit the head limit, indicate truncation
if [ "$(echo "$will_replay_and_in_default" | wc -w)" -eq 8 ]; then
   will_replay_and_in_default="$will_replay_and_in_default ..."
fi

if [ -n "$will_replay_and_in_default" ]; then
   echo "❌ Rebase blocked: it would replay commits already present in '$default_branch':"
   echo "   $will_replay_and_in_default"
   echo "Try checking out '$branch_name', doing a 'git push', and then rebasing again."
   exit 1
fi
