#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
import logging
import os
import re
import shutil
import subprocess
import sys

DEFAULT_EMAIL_DOMAIN = "khanacademy.org"
TEMPLATES_DIR = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    os.path.pardir,
    "templates"
)


def _cli_parser():
    parser = argparse.ArgumentParser(
        description='Clones and configures a KA repo.',
        usage=_cli_usage())
    # positional arguments
    parser.add_argument('src',
                        help=argparse.SUPPRESS,
                        nargs='?')
    parser.add_argument('dst',
                        help=argparse.SUPPRESS,
                        nargs='?')
    # operational changes
    parser.add_argument('--repair',
                        action='store_true',
                        help='attempt to khanify the current directory')
    # enable/disable functions
    parser.add_argument('-p', '--protect-master',
                        action='store_true',
                        help='install hooks to protect the master branch')
    parser.add_argument('--branch-name-hook',
                        action='store_true',
                        help='prepend commit-msgs with the current branch name')
    parser.add_argument('--lint-commit',
                        action='store_true',
                        help='hook up commit-msg linting')
    parser.add_argument('--no-email',
                        action='store_true',
                        help='do not override user.email')
    parser.add_argument('--no-gitconfig',
                        action='store_true',
                        help='do not link KA gitconfig extras')
    parser.add_argument('--no-lint',
                        action='store_true',
                        help='do not hook pre-push linting')
    parser.add_argument('--no-msg',
                        action='store_true',
                        help='no commit message template')
    # default values
    parser.add_argument('--email',
                        help="email address to use (default: %(default)s)",
                        default=_default_email())
    # preferences
    parser.add_argument('-q', '--quiet',
                        action='store_true',
                        help='silence succcess messages')
    return parser


def _cli_usage():
    return """
    %(prog)s          [options...] <src> [dst]
    %(prog)s --repair [options...]
    """


def _cli_log_step_success(msg):
    logging.info("-> " + msg)


def _cli_log_step_warning(msg):
    logging.warning("*** " + msg)


def die_if_not_valid_git_repo():
    revparse_retcode = subprocess.call(["git", "rev-parse"])
    # subprocess.call echos STDERR, so no need to log on error condition
    if revparse_retcode != 0:
        sys.exit(revparse_retcode)


def _run_in_main_repo_and_subrepos(cmd):
    """Run the given command in the main repo and all subrepos.

    This is typically needed with `git config --local`, since local
    settings are not inherited by submodules.

    Note this is not a perfect fix!, since if new submodules are created
    after the initial clone, they will not pick up the config setting.
    We'd have to hook into `git p` for that.  But it's better than nothing!
    """
    # We cannot use `git submodule foreach` since the submodules may
    # not have been checked out yet.
    all_submodules = subprocess.check_output(
        ['git', 'submodule', 'status', '--recursive']
    ).decode('utf-8')
    all_dirs = [l.split()[1] for l in all_submodules.splitlines()]
    all_dirs.append('.')      # do the main repo as well!

    for subdir in all_dirs:
        # For recursive submodules, the directory doesn't exist until we
        # do a `git submodule checkout` of the containing submodule.
        if os.path.exists(subdir):
            subprocess.check_call(cmd, cwd=subdir)


def _default_email():
    try:
        kac_email = subprocess.check_output(
            ["git", "config", "kaclone.email"]
        ).decode('utf-8')
        return kac_email.rstrip()
    except subprocess.CalledProcessError:
        return os.environ['USER'] + "@" + DEFAULT_EMAIL_DOMAIN


def set_email(email=_default_email()):
    # We have to run this in subrepos explicitly due to `--local`.
    _run_in_main_repo_and_subrepos(
        ['git', 'config', '--local', 'user.email', email]
    )
    _cli_log_step_success("Set user.email to {}".format(email))


def protect_master():
    """Copy master protection templates into the git hooks for the repo.

    We copy instead of symlink so that the hooks won't break if this tool
    moves or is deleted. There is a known trade-off here without being able
    to force update those hooks, but the increaed robustness should be worth it
    as those hooks are very simple.
    """
    # NOTE(mdr): These are currently the only pre-commit and pre-rebase hooks,
    # so it's safe to install them each as the single hook executable. If we
    # add more pre-commit or pre-rebase hooks later, we'll need to create an
    # executable that delegates to all of them, like we do for pre-push.
    _install_git_hook('pre-commit.protect-master', 'pre-commit')
    _install_git_hook('pre-push.protect-master', 'pre-push.protect-master')
    _install_git_hook('pre-rebase.protect-master', 'pre-rebase')
    # Make a note in the local git config -- e.g. git-review-branch uses this
    # to check if it should allow you to branch off master.
    # TODO(benkraft): Read this value as a default for the commandline
    # option, so you don't have to specify it every time you use ka-clone on
    # this repo.  (And do the same for other CLI flags.)
    _run_in_main_repo_and_subrepos(
        ['git', 'config', '--local', 'kaclone.protect-master', 'true']
    )

    _cli_log_step_success("Added hooks to protect master branch")


def install_pre_push_lint_hook():
    _install_git_hook('pre-push.lint', 'pre-push.lint')
    _cli_log_step_success("Added pre-push linting hook")


def _git_dir():
    """Retrieve the GIT_DIR from the system."""
    return subprocess.check_output(
        ["git", "rev-parse", "--git-dir"]
    ).decode('utf-8').rstrip()


def install_global_git_hooks():
    """Install git hooks that delegate to other, more specific git hooks."""
    # NOTE(mdr): This pre-push hook delegates to pre-push.lint and
    #     pre-push.protect-master, but only if they're installed. If neither is
    #     installed, then this pre-push hook is a no-op. So, this hook is
    #     always safe to install, regardless of the ka-clone arguments.
    _install_git_hook('pre-push', 'pre-push')
    _install_git_hook('commit-msg', 'commit-msg')


def _remove_git_hook(destination_name):
    """Remove a git hook from the CWD's git repo."""
    hooks_dir = os.path.join(_git_dir(), "hooks")
    dst = os.path.join(hooks_dir, destination_name)
    if os.path.exists(dst):
        os.unlink(dst)


def _install_git_hook(template_name, destination_name):
    """Install a template as an executable git hook into the CWD's git repo."""
    src = os.path.join(TEMPLATES_DIR, template_name)
    hooks_dir = os.path.join(_git_dir(), "hooks")
    if not os.path.isdir(hooks_dir):
        os.makedirs(hooks_dir)
    dst = os.path.join(hooks_dir, destination_name)
    # if dst is a symlink, unlink (remove) it first, to avoid overwriting
    if os.path.islink(dst):
        os.unlink(dst)
    shutil.copy(src, dst)
    os.chmod(dst, (os.stat(dst)).st_mode | 0o111)  # ensure chmod +x


def link_commit_template():
    """If KA commit message template is installed, link it."""
    _gitconfig_local_reference(
        'commit.template',
        os.path.join('.git_template', 'commit_template'),
        "commit message template"
    )


def link_gitconfig_extras():
    """If KA gitconfig is installed, link it."""
    _gitconfig_local_reference(
        'include.path',
        '.gitconfig.khan',
        "KA gitconfig extras"
    )


def _gitconfig_local_reference(config_key, location, name="reference"):
    """Configure reference to userdir template, but only if exists.

    This also updates the gitconfig reference in submodules, since
    `--local` does not cross submodule boundaries.
    """
    home = os.path.expanduser("~")  # safe for cross platform
    tmpl = os.path.join(home, location)
    if os.path.isfile(tmpl):
        _run_in_main_repo_and_subrepos(
            ['git', 'config', '--local', config_key, tmpl]
        )
        _cli_log_step_success("Linked {}".format(name))
    else:
        msg = "{} not installed, skipping...".format(name)
        # ugly hack to get capitalize() to work as desired
        msg = msg[0].upper() + msg[1:]
        _cli_log_step_warning(msg)


def _clone_repo(src, dst, quiet=False):
    """Clone a git repository. If dst is None, it will be inferred.

    Returns the path of the cloned repository.
    """
    if dst is None:
        dst = _guess_dst_name(src)

    cmds = ['git', 'clone']
    # we want the subprocess to be quiet too
    if quiet:
        cmds.append('--quiet')
    cmds.append(src)
    cmds.append(dst)

    retcode = subprocess.call(cmds)
    if retcode != 0:
        sys.exit(retcode)

    # Initialize submodules, so we can set configs on them too.
    cmds = ['git', 'submodule']
    if quiet:
        cmds.append('--quiet')
    cmds.extend(['update', '--init', '--recursive'])
    retcode = subprocess.call(cmds, cwd=dst)
    if retcode != 0:
        sys.exit(retcode)

    return dst


def _guess_dst_name(src):
    """Given a repository src, guess the destination name"""
    # remove any trailing slashes that may be in the URI or path
    src = src.rstrip("/")
    # remove the .git file extension if present, because Python stdlib basename
    # shockingly doesn't support that(!)
    src = _chomp(src, ".git")
    # for local filesystem paths, its possible the file base was just ".git" on
    # its own, that would leave us with a trailing slash, which Python basename
    # doesn't do the unix-y thing with. so have to manually rstrip that again.
    src = src.rstrip("/")
    # *finally*, we can do a normal basename function and expect to get what
    # we would have gotten from a unix-y tool with basename(str, ".git")
    base = os.path.basename(src)
    # then, substitute destination filenames the same way as github:
    #  - https://github.com/docker/docker/issues/679
    cleaned = re.sub(r'[^A-Za-z0-9_.-]', '-', base)
    return cleaned


def _chomp(s, sep):
    """Cut an exact match off the end of a string."""
    if s.endswith(sep):
        s = s[:-len(sep)]
    return s


def _cli_process_current_dir(cli_args):
    die_if_not_valid_git_repo()
    if not cli_args.no_email:
        set_email(args.email)
    if not cli_args.no_lint:
        install_pre_push_lint_hook()
    if not cli_args.no_msg:
        link_commit_template()
    if not cli_args.no_gitconfig:
        link_gitconfig_extras()

    if cli_args.protect_master:
        protect_master()

    if cli_args.lint_commit:
        _install_git_hook('commit-msg.lint', 'commit-msg.lint')
        _cli_log_step_success("Added commit-msg lint hook")
    else:
        _remove_git_hook('commit-msg.lint')

    if cli_args.branch_name_hook:
        _install_git_hook('commit-msg.branch-name', 'commit-msg.branch-name')
        _cli_log_step_success("Added commit-msg branch-name hook")
    else:
        _remove_git_hook('commit-msg.branch-name')

    install_global_git_hooks()


if __name__ == '__main__':
    parser = _cli_parser()
    args = parser.parse_args()

    logging.basicConfig(format="%(message)s")
    logging.getLogger().setLevel(logging.ERROR if args.quiet else logging.INFO)

    if args.repair:
        if args.src or args.dst:
            parser.error("--repair takes no arguments")
            # TODO(mroth): allow --repair to take an optional target
        _cli_process_current_dir(args)
    else:
        if not args.src:
            parser.print_help()
            sys.exit(0)

        _dst = _clone_repo(args.src, args.dst, args.quiet)
        logging.info(
            "Configuring your cloned git repository with KA defaults..."
        )
        os.chdir(_dst)
        _cli_process_current_dir(args)
